cmdhistory=["(def config (h/load-config \\"/Users/thorsten/development/db-migration-machine/db-migration-machine/resources/config-dev.edn\\")\\n  )" "config" "(\:source config)" "(db/get-data (\:source config) \\"select top 5 * from Person.Person\\")" "(db/get-data (\:source config) \\"select top 5 * from AdventureWorks2012.Person.Person\\")" "(db/get-data (\:target config) \\"select top 5 * from film\\")" "(def config (h/load-config \\"/Users/thorsten/development/db-migration-machine/db-migration-machine/resources/config-dev.edn\\")\\n  )" "(db/get-data (\:target config) \\"select top 5 * from film\\")" "(db/get-data (\:target config) \\"select * from film limit 5\\")" "(db/get-data (\:source config) \\"select top 5 * from AdventureWorks2012.Person.Person\\")" "(db/get-data (\:target config) \\"select * from film limit 5\\")" "(ns db-migration-machine.demo)" "(*ns*)" "*ns*" "(def config (h/load-config \\"/Users/thorsten/development/db-migration-machine/db-migration-machine/resources/config-dev.edn\\")\\n  )" "(db/get-data (\:target config) \\"select * from film limit 5\\")" "(db/set-pooled-db-source (\:source config))" "(require '[clojure.java.jdbc \:as jdbc])" "(jdbc/query (db/db-connection-source) \\"select top 5 * from Person.Person\\")" "(db/set-pooled-db-source (\:source config))" "(jdbc/query (db/db-connection-source) \\"select top 5 * from Person.Person\\")" "(db/set-pooled-db-source (\:source config))" "(jdbc/query (db/db-connection-source) \\"select top 5 * from Person.Person\\")" "(jdbc/query (db/db-connection-source) \\"select top 5 * from AdventureWorks2012.Person.Person\\")" "(def config (h/load-config \\"/Users/thorsten/development/db-migration-machine/db-migration-machine/resources/config-dev.edn\\")\\n  )" "(db/set-pooled-db-source (\:source config))" "(jdbc/query (db/db-connection-source) \\"select top 5 * from AdventureWorks2012.Person.Person\\")" "(jdbc/query (db/db-connection-source) \\"select top 5 * from AdventureWorks2012.Sales.Customer\\")" "(db/get-data (\:source config) \\"select top 5 * from AdventureWorks2012.Sales.Customer\\")" "(db/set-pooled-db-target (\:target config))" "(jdbc/query (db/db-connection-target) \\"select * from film limit 3\\")" "(db/get-source-data \\"select top 5 * from AdventureWorks2012.Sales.SalesTerritory\\")" "config" "(db/set-pooled-db-source (\:source config))" "(db/get-source-data \\"select top 5 * from AdventureWorks2012.Sales.SalesTerritory\\")" "(db/set-pooled-db-target (\:target config))" "(db/get-target-data \\"select * from film limit 3\\")" "(seq \\"CamelCase\\")" "(str (seq \\"CamelCase\\"))" "(loop [c (seq \\"CamelCase\\")]\\n  (prn c))" "(loop [c (seq \\"CamelCase\\")]\\n  (println c))" "(loop [c (seq \\"CamelCase\\")]\\n  (println (str c)))" "(loop [c (seq \\"CamelCase\\")]\\n  (println (java.lang.Character/isUpperCase c)))" "(first (seq \\"CamelCase\\"))" "(loop [c (seq \\"CamelCase\\")]\\n  (println (java.lang.Character/isUpperCase (first c))))" "(let [c (seq \\"CamelCase\\")]\\n (loop [s (first c)]\\n   (prn (java.lang.Character/isUpperCase s))\\n   (recur (rest c))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s (first charseq)\\n        cseq charseq]\\n   (prn (java.lang.Character/isUpperCase s))\\n   (recur (rest c))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s (first charseq)\\n        cseq charseq]\\n   (prn (java.lang.Character/isUpperCase s))\\n   (recur (rest cseq))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s (first charseq)\\n        cseq charseq]\\n   (prn (java.lang.Character/isUpperCase s))\\n   (recur (first cseq) (rest cseq))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s (first charseq)\\n        cseq charseq]\\n   (prn (str s \\" is upper-case\: \\" (java.lang.Character/isUpperCase s)))\\n   (recur (first cseq) (rest cseq))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s (first charseq)\\n        cseq (rest charseq)]\\n   (prn (str s \\" is upper-case\: \\" (java.lang.Character/isUpperCase s)))\\n   (recur (first cseq) (rest cseq))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (prn (str s \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n   (recur (rest cseq))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (prn (str s \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n   (recur (rest s))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n   (recur (rest s))))" "(let [s (seq \\"CamelCase\\")]\\n   (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n   (recur (rest s)))" "(def camel-case-sample \\"CamelCaseID\\")" "(let [s camel-case-sample]\\n   (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n   (recur (rest s)))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (prn (str s \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n   (recur (rest s))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n   (recur (rest s))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (seq? s)\\n     (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (seq? s)\\n     (do \\n       (prn s)\\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (seq? s)\\n     (do \\n       (prn s)\\n       (prn (count s))\\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (> (count s) 0)\\n     (do \\n       (prn s)\\n       (prn (count s))\\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (> (count s) 0)\\n     (do \\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (> (count s) 0)\\n     (do \\n       (prn java.lang.Character/toLowerCase (first s))\\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (> (count s) 0)\\n     (do \\n       (prn (str (first s)))\\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (> (count s) 0)\\n     (do \\n       (prn (clojure.string/lower-case (str (first s))))\\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (> (count s) 0)\\n     (do \\n       (when (java.lang.Character/isUpperCase (first s))\\n         (prn \\"_\\"))\\n       (prn (clojure.string/lower-case (str (first s))))\\n       (prn (str (first s) \\" is upper-case\: \\" (java.lang.Character/isUpperCase (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq]\\n   (when (> (count s) 0)\\n     (do \\n       (when (java.lang.Character/isUpperCase (first s))\\n         (prn \\"_\\"))\\n       (prn (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq\\n        last-was-uppercase false]\\n   (when (> (count s) 0)\\n     (do \\n       (when (java.lang.Character/isUpperCase (first s))\\n         (prn \\"_\\"))\\n       (prn (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isUpperCase (first s))))))" "(let [charseq (seq \\"CamelCase\\")]\\n (loop [s charseq\\n        last-was-lowercase false]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (prn \\"_\\"))\\n       (prn (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (prn \\"_\\"))\\n       (prn (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        result-string \\"\\"]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (str result-string \\"_\\"))\\n       (str result-string (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        result-string \\"\\"]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (str result-string \\"_\\"))\\n       (str result-string (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))\\n            result-string))))" "(def underscore-name (let [charseq (seq \\"CamelCaseID\\")]\\n                      (loop [s charseq\\n                             last-was-lowercase false\\n                             result-string \\"\\"]\\n                        (when (> (count s) 0)\\n                          (do \\n                            (when (and (java.lang.Character/isUpperCase (first s))\\n                                       last-was-lowercase)\\n                              (str result-string \\"_\\"))\\n                            (str result-string (clojure.string/lower-case (str (first s)))))\\n                          (recur (rest s)\\n                                 (java.lang.Character/isLowerCase (first s)))))))" "(def under-score-name (let [charseq (seq \\"CamelCaseID\\")]\\n                       (loop [s charseq\\n                              last-was-lowercase false\\n                              result-string \\"\\"]\\n                         (when (> (count s) 0)\\n                           (do \\n                             (when (and (java.lang.Character/isUpperCase (first s))\\n                                        last-was-lowercase)\\n                               (str result-string \\"_\\"))\\n                             (str result-string (clojure.string/lower-case (str (first s)))))\\n                           (recur (rest s)\\n                                  (java.lang.Character/isLowerCase (first s))\\n                                  result-string)))))" "underscore-name" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        result-string \\"\\"]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (str result-string \\"_\\"))\\n       (prn (str result-string (clojure.string/lower-case (str (first s))))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))\\n            result-string))))" "(clojure.string/join [\\"a\\" \\"b\\" \\"c\\"] \\"\\")" "(clojure.string/join \\"a\\" \\"b\\" \\"c\\" \\"\\")" "(clojure.string/join [\\"a\\" \\"b\\" \\"c\\"] [\\"\\"])" "(clojure.string/join \\"\\" [\\"a\\" \\"b\\" \\"c\\"])" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        result-string \\"\\"]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (clojure.string/join \\"\\" [result-string \\"_\\"]))\\n       (prn (str result-string (clojure.string/lower-case (str (first s))))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))\\n            result-string))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        result-string \\"\\"]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (clojure.string/join \\"\\" [result-string \\"_\\"]))\\n       (prn (clojure.string/join \\"\\" result-string (clojure.string/lower-case (str (first s))))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))\\n            result-string))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        result-string \\"\\"]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (clojure.string/join \\"\\" [result-string \\"_\\"]))\\n       (prn (clojure.string/join \\"\\" [result-string (clojure.string/lower-case (str (first s)))])))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))\\n            result-string))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (prn \\"_\\"))\\n       (prn (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        underscore-seq []]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (conj underscore-seq \\"_\\"))\\n       (conj underscore-seq (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))\\n            underscore-seq))))" "(def underscore-name (let [charseq (seq \\"CamelCaseID\\")]\\n         (loop [s charseq\\n                last-was-lowercase false\\n                underscore-seq []]\\n           (when (> (count s) 0)\\n             (do \\n               (when (and (java.lang.Character/isUpperCase (first s))\\n                          last-was-lowercase)\\n                 (conj underscore-seq \\"_\\"))\\n               (conj underscore-seq (clojure.string/lower-case (str (first s)))))\\n             (recur (rest s)\\n                    (java.lang.Character/isLowerCase (first s))\\n                    underscore-seq)))))" "underscore-name" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        underscore-seq []]\\n   (if (< (count s) 1)\\n     underscore-seq\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (conj underscore-seq \\"_\\"))\\n       (conj underscore-seq (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))\\n            underscore-seq))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        underscore-seq []]\\n   (if (< (count s) 1)\\n     underscore-seq\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (conj underscore-seq \\"_\\"))\\n       (conj underscore-seq (clojure.string/lower-case (str (first s))))\\n       (recur (rest s)\\n              (java.lang.Character/isLowerCase (first s))\\n              underscore-seq)))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        underscore-seq []]\\n   (if (< (count s) 1)\\n     underscore-seq\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (prn (conj underscore-seq \\"_\\")))\\n       (prn (conj underscore-seq (clojure.string/lower-case (str (first s)))))\\n       (recur (rest s)\\n              (java.lang.Character/isLowerCase (first s))\\n              underscore-seq)))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false]\\n   (when (> (count s) 0)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (prn \\"_\\"))\\n       (prn (clojure.string/lower-case (str (first s)))))\\n     (recur (rest s)\\n            (java.lang.Character/isLowerCase (first s))))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        underscore-seq []]\\n   (if (< (count s) 1)\\n     underscore-seq\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (conj underscore-seq \\"_\\"))\\n       (conj underscore-seq (clojure.string/lower-case (str (first s))))\\n       (recur (rest s)\\n              (java.lang.Character/isLowerCase (first s))\\n              underscore-seq)))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        underscore-seq []]\\n   (if (< (count s) 1)\\n     underscore-seq\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (conj underscore-seq \\"_\\"))\\n       (conj underscore-seq (clojure.string/lower-case (str (first s))))\\n       (recur (rest s)\\n              (java.lang.Character/isLowerCase (first s))\\n              (conj underscore-seq \\n                    (when (and (java.lang.Character/isUpperCase (first s))\\n                       last-was-lowercase)\\n                      \\"_\\")\\n                    (clojure.string/lower-case (str (first s)))))))))" "(let [charseq (seq \\"CamelCaseID\\")]\\n (loop [s charseq\\n        last-was-lowercase false\\n        underscore-seq []]\\n   (if (< (count s) 1)\\n     (clojure.string/join \\"\\" underscore-seq)\\n     (do \\n       (when (and (java.lang.Character/isUpperCase (first s))\\n                  last-was-lowercase)\\n         (conj underscore-seq \\"_\\"))\\n       (conj underscore-seq (clojure.string/lower-case (str (first s))))\\n       (recur (rest s)\\n              (java.lang.Character/isLowerCase (first s))\\n              (conj underscore-seq \\n                    (when (and (java.lang.Character/isUpperCase (first s))\\n                       last-was-lowercase)\\n                      \\"_\\")\\n                    (clojure.string/lower-case (str (first s)))))))))" "(h/translate-camel-case \\"SomeWeiredCamelCaseID\\")" "(def one-record (db/get-source-data \\"select top 1 * from AdventureWorks2012.Sales.SalesTerritory\\"))" "one-record" "(def one-record (db/get-source-data \\"select top 1 * from AdventureWorks2012.Sales.SalesTerritory\\"))" "one-record" "(def one-record (db/get-source-data \\"select top 1 * from AdventureWorks2012.Sales.SalesTerritory\\"))" "one-record" "(def one-record (db/get-source-data \\"select top 1 * from AdventureWorks2012.Sales.SalesTerritory\\"))" "one-record" "(keys one-record)" "(keys (first one-record))" "(def one-record (first (db/get-source-data \\"select top 1 * from AdventureWorks2012.Sales.SalesTerritory\\")))" "one-record" "(keys one-record)" "(map \\n  h/translate-camel-case\\n  (keys one-record))" "(map \\n  h/translate-camel-case\\n  (name (keys one-record)))" "(map \\n  h/translate-camel-case\\n  (map name (keys one-record)))" "(h/translate-camel-case \\"SomeCamelCaseID\\")" "(h/translate-camel-case \\"SomeAWSCamelCaseID\\")" "(h/translate-camel-case \\"SomeCamelCaseID\\")" "(map \\n  h/translate-camel-case\\n  (map name (keys one-record)))" "(map name (keys one-record))" "(h/translate-camel-case \\"FooBAR\\")" "one-record" "(map \\n  h/translate-camel-case\\n  (map name (keys one-record)))" "(reduce\\n  \#((list (identity %) (h/translate-camel-case %1)))\\n  {}\\n  (map name (keys one-record)))" "(reduce\\n  \#((list (identity %1) (h/translate-camel-case %1)))\\n  {}\\n  (map name (keys one-record)))" "(reduce\\n  (fn [x]\\n    (list (identity x) (h/translate-camel-case x)))\\n  {}\\n  (map name (keys one-record)))" "(map\\n  (fn [x]\\n    (list (identity x) (h/translate-camel-case x)))\\n  (map name (keys one-record)))" "(map\\n  (fn [x]\\n    (list (identity x) (h/translate-camel-case (name x))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(rename-keys one-record (map\\n     (fn [x]\\n       (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n     (keys one-record)))" "(clojure.set/rename-keys one-record (map\\n     (fn [x]\\n       (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n     (keys one-record)))" "(clojure.set/rename-keys one-record (map\\n     (fn [x]\\n       (map (identity x) (keyword (h/translate-camel-case (name x)))))\\n     (keys one-record)))" "(map\\n  (fn [x]\\n    (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (map (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (hash-map (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "config" "(\:sql-db-host (\:source config))" "(reduce\\n  (fn [x]\\n    (hash-map (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record)\\n  {})" "(reduce\\n  (fn [x]\\n    (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record)\\n  {})" "(map\\n  (fn [x]\\n    (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (hash-map (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (identity x) (keyword (h/translate-camel-case (name x))))\\n  (keys one-record))" "(conj {} (map\\n           (fn [x]\\n             (identity x) (keyword (h/translate-camel-case (name x))))\\n           (keys one-record)))" "(conj \#{} (map\\n            (fn [x]\\n              (identity x) (keyword (h/translate-camel-case (name x))))\\n            (keys one-record)))" "(hash-map (map\\n        (fn [x]\\n          (identity x) (keyword (h/translate-camel-case (name x))))\\n        (keys one-record)))" "(map\\n  (fn [x]\\n    (identity x) (keyword (h/translate-camel-case (name x))))\\n  (keys one-record))" "(into {} (map\\n           (fn [x]\\n             (identity x) (keyword (h/translate-camel-case (name x))))\\n           (keys one-record)))" "(into {} (map\\n           (fn [x]\\n             (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n           (keys one-record)))" "(map\\n  (fn [x]\\n    (identity x) (keyword (h/translate-camel-case (name x))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (list (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (vec (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(map\\n  (fn [x]\\n    (vector (identity x) (keyword (h/translate-camel-case (name x)))))\\n  (keys one-record))" "(into {} (map\\n           (fn [x]\\n             (vector (identity x) (keyword (h/translate-camel-case (name x)))))\\n           (keys one-record)))" "(clojure.set/rename-keys one-record \\n                         (into {} (map\\n                                    (fn [x]\\n                                      (vector (identity x) (keyword (h/translate-camel-case (name x)))))\\n                                    (keys one-record))))" "(def translated-record (clojure.set/rename-keys one-record \\n                                                (into {} (map\\n                                                           (fn [x]\\n                                                             (vector (identity x) (keyword (h/translate-camel-case (name x)))))\\n                                                           (keys one-record)))))" "(keys one-record)" "(map \\n  clojure.string/lower-case\\n  (keys one-record))" "(map \\n  h/translate-camel-case\\n  (keys one-record))" "(map \\n  \#(h/translate-camel-case (name %))\\n  (keys one-record))" "(map + [1 2 3])" "(map java.lang.Character/BYTES \\\\a \\\\b \\\\c)" "(map java.lang.Character/BYTES [\\\\a \\\\b \\\\c])" "(map \\n  clojure.string/lower-case\\n  (keys one-record))" "(reduce + [1 2 3])" "(db/get-source-data \\"select top 3 * from AdventureWorks2012.Person.Person\\")" "(db/get-target-data \\"select * from film limit 3\\")" "(jdbc/query (db/db-connection-source) \\"select top 3 * from AdventureWorks2012.Person.Person\\" \:identifiers identiy)" "(jdbc/query (db/db-connection-source) \\"select top 3 * from AdventureWorks2012.Person.Person\\" \:identifiers identity)" "(jdbc/query (db/db-connection-source) \\"select top 3 * from AdventureWorks2012.Person.Person\\")" "(jdbc/query (db/db-connection-source) \\"select top 3 * from AdventureWorks2012.Person.Person\\" \:identifiers identity)" "(jdbc/query (db/db-connection-source) \\"select top 3 * from AdventureWorks2012.Person.Person\\" \\n            \:identifiers h/translate-camel-case)" "(jdbc/query (db/db-connection-source) \\"select top 1 * from AdventureWorks2012.Person.Person\\" \\n            \:identifiers h/translate-camel-case)" "(jdbc/query (db/db-connection-source) \\"select top 1 * from AdventureWorks2012.Person.Person\\" \\n            )" "(jdbc/query (db/db-connection-source) \\"select top 1 * from AdventureWorks2012.Person.Person\\" \\n            \:identifiers h/translate-camel-case)" "(jdbc/query (db/db-connection-source) \\"select top 1 * from AdventureWorks2012.Person.Person\\" \\n            \:identifiers identity)" "(jdbc/query (db/db-connection-source) \\"select top 1 * from AdventureWorks2012.Person.Person\\" \\n            \:identifiers h/translate-camel-case)" "(db/get-source-data \\"select top 3 * from AdventureWorks2012.Person.Person\\")" "(db/get-source-data \\"select top 1 * from AdventureWorks2012.Person.Person\\")" "(filter \:first_name db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\")" "(filter (\:first_name) db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\")" "(filter \#{\:first_name} db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\")" "(map \:first_name db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\")" "(filter \#{\:first_name} (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(filter \:first_name (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(map \:first_name (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(map [\:first_name \:last_name] (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(map \#{\:first_name \:last_name} \\n     (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(map \:first_name (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\")" "(select-keys (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\")\\n             [\:first_name \:last_name])" "(map \#(select-keys % [\:first_name \:last_name])\\n     (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(def target-keys [\:first_name \:last_name \:person_type])" "(map \#(select-keys % target-keys)\\n     (db/get-source-data \\"select top 2 * from AdventureWorks2012.Person.Person\\"))" "(db/get-target-data \\"select \\n    t.schemaname,\\n    t.tablename,\\n    a.attname as colname\\nfrom pg_catalog.pg_attribute a\\n    inner join pg_catalog.pg_class c\\n        on a.attrelid \= c.relfilenode\\n    inner join pg_catalog.pg_tables t\\n        on c.relname \= t.tablename\\nwhere a.attstattarget \= -1\\")" "(map \:colname \\n     (db/get-target-data \\"select \\n    t.schemaname,\\n    t.tablename,\\n    a.attname as colname\\nfrom pg_catalog.pg_attribute a\\n    inner join pg_catalog.pg_class c\\n        on a.attrelid \= c.relfilenode\\n    inner join pg_catalog.pg_tables t\\n        on c.relname \= t.tablename\\nwhere a.attstattarget \= -1\\"))" "config" "(db/get-data (db/getTableNamesMSSQL))" "(db/get-data (db/getTableNamesMSSQL config))" "config" "(db/get-table-names-MSSQL config)" "(db/get-data (db/get-table-names-MSSQL config))" "(db/get-table-names-MSSQL config)" "(count (db/get-table-names-MSSQL config))" "(db/get-target-data \\"select \\n    t.schemaname,\\n    t.tablename,\\n    a.attname as colname\\nfrom pg_catalog.pg_attribute a\\n    inner join pg_catalog.pg_class c\\n        on a.attrelid \= c.relfilenode\\n    inner join pg_catalog.pg_tables t\\n        on c.relname \= t.tablename\\nwhere a.attstattarget \= -1\\")" "(db/get-source-data (db/get-table-names-MSSQL config))" "(db/get-table-names-MSSQL config)" " (\:sql-db-name config)" " (\:sql-db-name (\:source config))" "(db/get-table-names-MSSQL (\:source config))" "(db/get-source-data (db/get-table-names-MSSQL (\:source config)))" "(db/get-table-names-PG (\:target config))" "(db/get-target-data (db/get-table-names-PG (\:target config)))" "(db/get-source-data (db/get-column-names-mssql (\:source config)) \\"Person\\" )" "(db/get-source-data (db/get-column-names-mssql (\:source config) \\"Person\\" ))" "(db/get-column-names-mssql (\:source config) \\"Person\\" )" "(db/get-source-data (db/get-column-names-mssql (\:source config) \\"Person\\" ))" "(db/get-column-names-pg (\:target config) \\"Address\\")" "(db/get-target-data (db/get-column-names-pg (\:target config) \\"Address\\"))" "(db/get-source-data \\"select top 5 * from AdventureWorks2012.Sales.SalesTerritory\\")" "(db/get-source-data (db/get-column-names (\:source config) \\"Person\\" ))" "(db/get-target-data (db/get-column-names (\:target config) \\"Address\\"))" "(first (db/get-source-data (db/get-column-names (\:source config) \\"Person\\" )))" "(db/get-source-data (db/get-column-names (\:source config) \\"Person\\" ))" "(db/get-target-data (db/get-column-names (\:target config) \\"Address\\"))" "(db/get-source-column-names config \\"Person\\")" "(db/get-source-column-names (\:source config) \\"Person\\")" "(db/get-source-column-names config \\"Person\\")" "(db/get-target-column-names config \\"address\\")" "(db/get-target-table-names config)" "(db/get-source-table-data config \\"Person\\" \\"Person\\")" "(db/get-sql-table-data-mssql (\:source config) \\"Person\\" \\"Person\\")" "(db/get-sql-table-data-mssql (\:source config) \\"Production\\" \\"Product\\")" "(db/get-source-table-data (\:source config) \\"Production\\" \\"Product\\")" "(db/get-sql-table-data-mssql (\:source config) \\"Production\\" \\"Product\\")" "(db/get-source-data (db/get-sql-table-data-mssql (\:source config) \\"Production\\" \\"Product\\"))" "(db/get-sql-table-data (\:source config) \\"Production\\" \\"Product\\")" "(db/get-source-table-data (\:source config) \\"Production\\" \\"Product\\")" "(db/get-source-table-data config \\"Production\\" \\"Product\\")" "(db/get-target-column-names config \\"address\\")" "(map \:tablename (db/get-target-column-names config \\"address\\"))" "(map \:colename (db/get-target-column-names config \\"address\\"))" "(map \:colname (db/get-target-column-names config \\"address\\"))" "(map \:colname (db/get-target-column-names config \\"Product\\"))" "(let [target-keys (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      source-data db/get-source-table-data config \\"Procution\\" \\"Procuct\\"]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-keys (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      source-data (db/get-source-table-data config \\"Procution\\" \\"Procuct\\")]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-keys (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      source-data (db/get-source-table-data config \\"Procution\\" \\"Product\\")]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-keys (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      source-data (db/get-source-table-data config \\"Prodution\\" \\"Product\\")]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-keys (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-keys (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n  (prn target-keys)\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-keys (map keyword (map \:colname (db/get-target-column-names config \\"Product\\")))\\n      source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(def sample-data (let [target-keys (map keyword (map \:colname (db/get-target-column-names config \\"Product\\")))\\n                       source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n                   (map \#(select-keys % target-keys)\\n                        source-data)))" "(first sample-data)" "(db/insert-target-data-pg (\:target config) \:product (first sample-data))" "(db/insert-target-data-pg (\:target config) \:production.product (first sample-data))" "(db/insert-target-data-pg (\:target config) \:production.product sample-data)" "sample-data" "(db/insert-target-data-pg (\:target config) \:production.product (first sample-data) (first (rest sample-data)))" "(db/get-source-data \\"select top 2 from AdventureWorks2012.Production.Product\\")" "(db/get-source-data \\"select top 2 * from AdventureWorks2012.Production.Product\\")" "(def sample-data (db/get-source-data \\"select top 2 * from AdventureWorks2012.Production.Product\\"))" "(db/insert-target-data-pg (\:target config) \:production.product sample-data)" "sample-data" "(vec sample-data)" "(db/insert-target-data-pg (\:target config) \:production.product (vec sample-data))" "(let [target-keys (map keyword (map \:colname (db/get-target-column-names config \\"Product\\")))\\n      source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-keys (map keyword (map \:colname (db/get-target-column-names config \\"Product\\")))\\n      source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n  (prn target-keys)\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(let [target-key-name (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      target-keys (map keyword target-key-name)]\\n  (prn target-key-name)\\n  (prn target-keys))" "(let [target-values (db/get-target-column-names config \\"Product\\")\\n      target-key-name (map \:colname (db/get-target-column-names config \\"Product\\"))\\n      target-keys (map keyword target-key-name)]\\n  (prn target-values)\\n  (prn target-key-name)\\n  (prn target-keys))" "(db/get-target-column-names (\:target config) \\"product\\")" "(db/get-target-column-names config \\"product\\")" "(db/get-target-column-names config \\"production.product\\")" "(db/get-target-table-names config)" "(db/get-target-column-names config \\"products\\")" "(db/get-target-column-names config \\"product\\")" "(db/get-column-names-pg (\:target config) \\"product\\")" "(db/get-target-data (db/get-column-names-pg (\:target config) \\"product\\"))" "(db/get-column-names-pg (\:target config) \\"product\\")" "(db/get-target-data (db/get-column-names-pg (\:target config) \\"product\\"))" "(let [target-keys (map keyword (map \:column_name (db/get-target-column-names config \\"Product\\")))\\n      source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n  (map \#(select-keys % target-keys)\\n       source-data))" "(def source-data (let [target-keys (map keyword (map \:column_name (db/get-target-column-names config \\"Product\\")))\\n                       source-data (db/get-source-table-data config \\"Production\\" \\"Product\\")]\\n                   (map \#(select-keys % target-keys)\\n                        source-data)))" "(db/insert-target-data-pg (\:target config) \:production.product source-data)" "(db/get-target-table-names config)" "(def table-names (db/get-target-table-names config))" "(first table-names)" "(map [\:schemaname \:tablename] (first table-names))" "(map (fn [x] (\:schemaname x (\:tablename x)) (first table-names)))\\n(map \:schemaname (first table-names))" "(map (fn [x] (\:schemaname x (\:tablename x)) (first table-names)))" "(\:schemaname (first table-names))" "(def table-names (db/get-target-table-names config))" "table-names" "(map \:schema_name table-names)" "(map \:schema_name (first table-names))" "(\:schema_name (first table-names))" "(map \:table_schema table-names)" "(map [\:table_schema \:table_name] \: table-names)" "(map [\:table_schema \:table_name] table-names)" "(map \#{\:table_schema \:table_name\u2260} table-names)" "(map \#{\:table_schema \:table_name} table-names)" "(defn columns\\n  [column-names] \\n  (fn [row]\\n    (vec (map row column-names))))" "(columns [\:table_schema \:table_name] table-names)" "(columns [\:table_schema \:table_name])" "((columns [\:table_schema \:table_name]) table-names)" "(map (columns [\:table_schema \:table_name]) table-names)" "(def table-list (map (columns [\:table_schema \:table_name]) table-names))" "(first table-list)" "(map (first table-names) [\:table_schema \:table_name])" "(map table-names [\:table_schema \:table_name])" "(map (first table-names) [\:table_schema \:table_name])" "(db/get-target-table-names config)" "(first table-names)" "(\:table_name (first table-names))" "(defn migrate\\n  [config]\\n  (loop [target-table (db/get-target-table-names config)]\\n    (let [target-keys (map keyword (map \:column_name \\n                                        (db/get-target-column-names config \\n                                                                    (\:table_name target-table))))\\n          source-data (db/get-source-table-data config\\n                                                (\:table_schema target-table)\\n                                                (\:table_name target-table))\\n          insert-data (map \#(select-keys % target-keys) source-data)]\\n      (prn (\:table_schema target-table) (\:table_name target-table) \\n      ))))" "(migrate config)" "config" "(defn migrate\\n  [config]\\n  (loop [target-tables (db/get-target-table-names config)]\\n    (let [target-table (first target-tables)]\\n      (prn target-table))\\n    (recur (rest target-tables))))" "(defn migrate\\n  [config]\\n  (loop [target-tables (db/get-target-table-names config)]\\n    (let [target-table (first target-tables)]\\n      (if (\= (count target-table) 2)\\n        (prn target-table)\\n        (recur (rest target-tables))))))" "(defn migrate\\n  [config]\\n  (loop [target-tables (db/get-target-table-names config)]\\n    (let [target-table (first target-tables)]\\n      (if (> (count target-table) 0)\\n        (prn target-table)\\n        (recur (rest target-tables))))))" "(let [target-tables (db/get-target-table-names config)]\\n  (prn target-tables))" "(loop [target-tables (db/get-target-table-names config)]\\n  (let [target-table (first target-tables)]\\n    (if (\= (count target-table) 3)\\n      (prn target-table)\\n      (recur (rest target-tables)))))" "(loop [target-tables (db/get-target-table-names config)]\\n  (let [target-table (first target-tables)]\\n    (if (> (count target-tables) 0)\\n      (prn target-table)\\n      (recur (rest target-tables)))))" "(loop [target-tables (db/get-target-table-names config)]\\n  (let [target-table (first target-tables)]\\n      (prn target-table)\\n      (recur (rest target-tables))))" "(doseq [target-table (db/get-target-table-names config)]\\n  (prn target-table))" "(defn migrate\\n  [config]\\n  (doseq [target-table (db/get-target-table-names config)]\\n    (let [target-keys (map keyword (map \:column_name \\n                                        (db/get-target-column-names config \\n                                                                    (\:table_name target-table))))\\n          source-data (db/get-source-table-data config\\n                                                (\:table_schema target-table)\\n                                                (\:table_name target-table))\\n          insert-data (map \#(select-keys % target-keys) source-data)]\\n      (prn (\:table_schema target-table) (\:table_name target-table)))))" "(migrate config)" "(require '[camel-snake-kebab.core \:as cs])" "(use 'camel-snake-kebab.core)" "(require '[camel-snake-kebab.core \:as cs])" "(cs/->camelCase \:table_schema)" "(defn migrate\\n  [config]\\n  (doseq [target-table (db/get-target-table-names config)]\\n    (let [target-keys (map keyword (map \:column_name \\n                                        (db/get-target-column-names config \\n                                                                    (\:table_name target-table))))\\n          source-data (db/get-source-table-data config\\n                                                (\:table_schema (cs/->camelCase target-table))\\n                                                (\:table_name (cs/->camelCase target-table)))\\n          insert-data (map \#(select-keys % target-keys) source-data)]\\n      (prn (\:table_schema target-table) (\:table_name target-table)))))" "(migrate config)" "(defn migrate\\n  [config]\\n  (doseq [target-table (db/get-target-table-names config)]\\n    (let [target-keys (map keyword (map \:column_name \\n                                        (db/get-target-column-names config \\n                                                                    (\:table_name target-table))))\\n          source-data (db/get-source-table-data config\\n                                                (cs/->camelCase (\:table_schema target-table))\\n                                                (cs/->camelCase (\:table_name target-table)))\\n          insert-data (map \#(select-keys % target-keys) source-data)]\\n      (prn (\:table_schema target-table) (\:table_name target-table)))))" "(migrate config)" "(defn migrate\\n  [config]\\n  (doseq [target-table (db/get-target-table-names config)]\\n    (let [target-keys (map keyword (map \:column_name \\n                                        (db/get-target-column-names config \\n                                                                    (\:table_name target-table))))\\n          source-data (db/get-source-table-data config\\n                                                (cs/->camelCase (\:table_schema target-table))\\n                                                (cs/->camelCase (\:table_name target-table)))\\n          insert-data (map \#(select-keys % target-keys) source-data)]\\n      (prn (str (\:table_schema target-table) \\".\\" (\:table_name target-table))))))" "(migrate config)" "(defn migrate\\n  [config]\\n  (doseq [target-table (db/get-target-table-names config)]\\n    (let [target-keys (map keyword (map \:column_name \\n                                        (db/get-target-column-names config \\n                                                                    (\:table_name target-table))))\\n          source-data (db/get-source-table-data config\\n                                                (cs/->camelCase (\:table_schema target-table))\\n                                                (cs/->camelCase (\:table_name target-table)))\\n          insert-data (map \#(select-keys % target-keys) source-data)]\\n      (db/insert-target-data-pg (\:target config) \\n                                (prn (str (\:table_schema target-table) \\n                                          \\".\\" \\n                                          (\:table_name target-table)))\\n                                source-data))))" "(migrate config)" "(defn migrate\\n  [config]\\n  (doseq [target-table (db/get-target-table-names config)]\\n    (let [target-keys (map keyword (map \:column_name \\n                                        (db/get-target-column-names config \\n                                                                    (\:table_name target-table))))\\n          source-data (db/get-source-table-data config\\n                                                (cs/->camelCase (\:table_schema target-table))\\n                                                (cs/->camelCase (\:table_name target-table)))\\n          insert-data (map \#(select-keys % target-keys) source-data)]\\n      (db/insert-target-data-pg (\:target config) \\n                                (keyword (str (\:table_schema target-table) \\n                                           \\".\\" \\n                                           (\:table_name target-table)))\\n                                source-data))))" "(migrate config)" "(mig/migrate config)" "(db/get-source-table-data (\:source config) \\"HumanResources\\" \\"Employee\\")" "(db/get-source-table-data config \\"HumanResources\\" \\"Employee\\")" "(map \:birth_date (db/get-source-table-data config \\"HumanResources\\" \\"Employee\\"))" "(mig/migrate config)" "(count (db/get-source-table-data config \\"person\\" \\"emailaddress\\"))" "(mig/migrate config)" "(first (db/get-source-table-data config \\"production\\" \\"illustration\\"))" "(map \:diagram (take 5 (db/get-source-table-data config \\"production\\" \\"illustration\\")))" "(mig/migrate config)" "(map \:diagram (take 5 (db/get-source-table-data config \\"production\\" \\"illustration\\")))" "(mig/migrate config)" "(map \:diagram (take 5 (db/get-source-table-data config \\"humanresources\\" \\"employee\\")))" "(map \:birth_date (take 5 (db/get-source-table-data config \\"humanresources\\" \\"employee\\")))" "(mig/migrate config)" "(map \:diagram (take 5 (db/get-source-table-data config \\"production\\" \\"illustration\\")))" "(map \:diagram (take 1 (db/get-source-table-data config \\"production\\" \\"illustration\\")))" "(mig/migrate config)" "(require '[camel-snake-kebab.core \:as cs])" "(cs/->snake_case \\"SomeID\\")" "(cs/->snake_case \\"AdventureWorkd2012DB\\")" "(cs/->snake_case \\"AWSAdventureWorkd2012DB\\")"]
eclipse.preferences.version=1
